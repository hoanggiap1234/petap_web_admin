plugins {
    id 'java'
    id "idea"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "org.openapi.generator"
    id "org.sonarqube"
    id "io.spring.nohttp"
}

group = "io.petapp"
version = "1.0-SNAPSHOT"
description = "PetApp Service"

sourceCompatibility = 1.8
targetCompatibility = 1.8
assert System.properties["java.specification.version"] == "1.8" || "1.9" || "10" || "11" || "12" || "13" || "14" || "15"

apply plugin: 'io.spring.dependency-management'

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: "gradle/swagger.gradle"

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

defaultTasks "bootRun"

springBoot {
    mainClassName = "io.petapp.PetAppServiceApplication"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // ignoreFailures true
    reports.html.enabled = false
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // ignoreFailures true
    reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

checkstyle {
    toolVersion "${checkstyleVersion}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}
nohttp {
    source.include "build.gradle", "README.md"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://gitlab.pitagon.vn/api/v4/projects/97/packages/maven"
        name "Pitagon"
        credentials(HttpHeaderCredentials) {
            name = 'Deploy-Token'
            value = 'UekE8p1zPnwhkBZz5-xx'
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'javax.cache:cache-api:1.1.1'
    implementation 'javax.transaction:javax.transaction-api:1.3'
    implementation 'javax.persistence:javax.persistence-api:2.2'
    implementation 'org.redisson:redisson:3.16.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hppc:2.12.4'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.4'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.12.4'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.4'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-codec:commons-codec:1.15'
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    implementation 'com.github.cloudyrock.mongock:mongock-spring-v5:4.3.8'
    implementation 'com.github.cloudyrock.mongock:mongodb-springdata-v3-driver:4.3.8'
    implementation 'io.springfox:springfox-oas:3.0.0'
    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'
    implementation 'io.springfox:springfox-bean-validators:3.0.0'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    implementation 'tech.jhipster:jhipster-framework:7.1.0'
    implementation 'org.zalando:problem-spring-web:0.26.2'
    implementation 'org.json:json:20210307'
    implementation 'org.apache.directory.api:api-ldap-model:2.1.0'
    implementation 'io.pitagon:fpt-sms-brand-name-client:1.2'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.69'
    implementation 'org.modelmapper:modelmapper:2.4.4'
    implementation 'com.cronutils:cron-utils:9.1.5'

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "6.8.3"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
